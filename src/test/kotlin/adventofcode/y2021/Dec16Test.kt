package adventofcode.y2021

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import util.AbstractKotlinTest

/**
 * TODO write documentation
 */
class Dec16Test : AbstractKotlinTest() {
	@Test
	fun one() {
		runTest(1, Dec16()::solve)
	}

	@Test
	fun solveSimple() {
		val p = Dec16().packet("D2FE28")
		assertEquals(Dec16.Literal(6, 21, 2021), p)
	}

	@Test
	fun solveOperatorZero() {
		val p = Dec16().packet("38006F45291200")
		assertEquals(/* expected = */ Dec16.Operator(
			1, 6, 56, listOf(
				Dec16.Literal(version = 6, value = 10, length = 11),
				Dec16.Literal(version = 2, value = 20, length = 16)
			)
		), /* actual = */ p
		)
	}

	@Test
	fun solveOperatorOne() {
		val p = Dec16().packet("EE00D40C823060")

		assertEquals(/* expected = */
			Dec16.Operator(
				version = 7,
				typeId = 3,
				length = 51,
				packets = listOf(
					Dec16.Literal(version = 2, length = 11, value = 1),
					Dec16.Literal(version = 4, length = 11, value = 2),
					Dec16.Literal(version = 1, length = 11, value = 3)
				)
			), /* actual = */
			p
		)
	}

	@Test
	fun moreOperators() {
		val p = Dec16().packet("8A004A801A8002F478")

		assertEquals(16, p.sumVersions())
//		assertEquals(Dec16.Operator(4, 1, 1, listOf()), p)
	}

	@Test
	fun evenMoreOperators() {
		val p = Dec16().packet("620080001611562C8802118E34")

		assertEquals(12, p.sumVersions())
	}

	@Test
	fun evenMoreOperators2() {
		val p = Dec16().packet("C0015000016115A2E0802F182340")

		assertEquals(23, p.sumVersions())
	}

	@Test
	fun evenMoreOperators3() {
		val p = Dec16().packet("A0016C880162017C3686B18A3D4780")

		assertEquals(31, p.sumVersions())
	}

	@Test
	fun real() {
		val p = Dec16().packet(
			
		)

		assertEquals(31, p.sumVersions())
	}
}
